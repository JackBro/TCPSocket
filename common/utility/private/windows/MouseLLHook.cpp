#include "MouseLLHook.h"

namespace Titanium
{
	MouseLLHook::MouseLLHook()
		: m_hMouseHook(nullptr)
	{
	}
	MouseLLHook::~MouseLLHook() 
	{
		Stop(); 
	}
	void MouseLLHook::ThreadProc(LPVOID lpParm)
	{
		MouseLLHook* pMouseLLHook = (MouseLLHook*)lpParm;
		pMouseLLHook->InstallHook();
		pMouseLLHook->MessageLoop();
		pMouseLLHook->UninstallHook();
	}
	static LRESULT CALLBACK MouseHookProc(int nCode, WPARAM wParam, LPARAM lParam)
	{
		if (nCode >= 0)
		{
			MSLLHOOKSTRUCT* pMSLLHookStruct = (MSLLHOOKSTRUCT*)lParam;
			// LLMHF_INJECTED: 0x00000001, test the event-injected flag.
			// ignore the message generated by mouse_event;
			if (!(pMSLLHookStruct->flags & LLMHF_INJECTED) && wParam == WM_MOUSEMOVE)
			{
				MouseLLHook::Instance().UpdatePosition(pMSLLHookStruct->pt);
			}
		}
		return CallNextHookEx(MouseLLHook::Instance().GetHookHandle(), nCode, wParam, lParam);
	}
	MouseLLHook& MouseLLHook::Instance()
	{
		static MouseLLHook s_mouseHookInstance;
		return s_mouseHookInstance;
	}
	void MouseLLHook::InstallHook()
	{
		HINSTANCE hInstance = GetModuleHandle(NULL);
		ENSURE(hInstance != nullptr);

		m_hMouseHook = SetWindowsHookEx(WH_MOUSE_LL, (HOOKPROC)&MouseHookProc, hInstance, NULL);
		ENSURE(m_hMouseHook != nullptr);
	}
	void MouseLLHook::UninstallHook()
	{
		if (m_hMouseHook != nullptr)
		{
			UnhookWindowsHookEx(m_hMouseHook);
			m_hMouseHook = nullptr;
		}
	}
	void MouseLLHook::MessageLoop()
	{
		MSG message;
		while (GetMessage(&message, NULL, 0, 0))
		{
			TranslateMessage(&message);
			DispatchMessage(&message);
		}
	}
	void MouseLLHook::Start()
	{
		m_posX = 0;
		m_posY = 0;

		m_hThread = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)&MouseLLHook::ThreadProc, this, NULL, &m_dwThreadId);
		ENSURE(m_hThread != nullptr);
	}
	void MouseLLHook::Stop()
	{
		if (m_dwThreadId)
		{
			PostThreadMessage(m_dwThreadId, WM_QUIT, 0, 0);
			WaitForSingleObject(m_hThread, INFINITE);
			m_dwThreadId = 0;
			m_hThread = nullptr;
		}
	}
	HHOOK MouseLLHook::GetHookHandle()
	{
		return m_hMouseHook;
	}
	POINT MouseLLHook::GetPosition()
	{
		POINT pos = { m_posX, m_posY };
		return pos;
	}
	void MouseLLHook::UpdatePosition(const POINT& pos)
	{
		m_posX = pos.x;
		m_posY = pos.y;
	}
}